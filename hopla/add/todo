#!/usr/bin/env bash

set -o errexit
set -o pipefail

source "${library_dir}/api_proxy.sh"
source "${library_dir}/logging.sh"

# data that we want to send to the API for this
declare habitica_task_priority="1.0" # 1.0 is the default
declare habitica_text=""
declare habitica_date=""
declare checklist_file=""

parse_cmdline() {
  declare -i cur_arg=0
  declare -r commandline_args=("$@")
  for _ in "$@"; do
    case "${commandline_args[${cur_arg}]}" in
      --hard) habitica_task_priority="2" ;;
      --medium) habitica_task_priority="1.5" ;;
      --easy) habitica_task_priority="1" ;;
      --trivial) habitica_task_priority="0.1" ;;
      --due-date|--deadline)
        cur_arg+=1
        habitica_date=${commandline_args[${cur_arg}]}
        ;;
      --checklist)
        cur_arg+=1
        checklist_file=${commandline_args[${cur_arg}]}
        ;;
      *)
        habitica_text+=${commandline_args[${cur_arg}]}
        ;;
    esac
    cur_arg+=1
  done
}

print_task_id() {
  echo "$1" | jq --raw-output '.data.id'
}

post_todo() {
  debug "post_todo"
  # <https://habitica.com/apidoc/#api-Task-CreateUserTasks>
  local habitica_type="todo"

  post_data="{"
  post_data+="\"text\":\"${habitica_text}\", "
  post_data+="\"priority\":\"${habitica_task_priority}\", "
  if [[ -n "${habitica_date}" ]]; then
    post_data+="\"date\":\"${habitica_date}\", "
  fi
  post_data+="\"type\":\"${habitica_type}\" "
  post_data+="}"

  http_response=$(post_curl "tasks/user" "${post_data}")
  print_task_id "$http_response"
}

add_tasks_to_todo_checklist() {
  debug "add_tasks_to_todo_checklist"
  # <https://habitica.com/apidoc/#api-Task-AddChecklistItem>
  task_id="$1"

  # every line in the file is interpreted to be a seperated checklist item
  while read -r task; do
    post_data="{\"text\":"
    post_data+="\"${task}\""
    post_data+="}"

    post_curl "tasks/${task_id}/checklist" "${post_data}" >> /dev/null
  done < "${checklist_file}"
}

main() {
  parse_cmdline "$@"

  task_id=$(post_todo)
  if [[ -n "${checklist_file}" ]]; then
    # validate checklist file if any
    if [[ -d "${checklist_file}" ]]; then
      echo "${checklist_file} is a directory"
      exit 1
    fi
    if [[ ! -e "${checklist_file}" ]]; then
      echo "cannot find ${checklist_file}: try an absolute paths instead"
      exit 1
    fi

    add_tasks_to_todo_checklist "$task_id"
  fi
}

main "$@"
