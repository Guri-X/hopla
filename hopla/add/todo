#!/usr/bin/env bash

set -o errexit

source "${library_dir}/api_proxy.sh"
source "${library_dir}/logging.sh"

readonly args=($@)

cur_arg=0
for _ in "${args[@]}"; do
  case "${args[${cur_arg}]}" in
  --hard)
    habitica_priority="2"
    ;;
  --medium)
    habitica_priority="1.5"
    ;;
  --easy)
    habitica_priority="1"
    ;;
  --trivial)
    habitica_priority="0.1"
    ;;
  --due-date|--deadline)
    cur_arg=$(( "${cur_arg}" + 1 ))
    habitica_date=${args[${cur_arg}]}
    ;;
  --checklist)
    cur_arg=$(( "${cur_arg}" + 1 ))
    checklist_file=${args[${cur_arg}]}
    ;;
  *)
    # We are at the end of a (properly) formatted command.
    # Now parse the "text" and remove multiple spaces between words.
    habitica_text+=${args[${cur_arg}]}
    cur_arg=$(( "${cur_arg}" + 1 ))
    while [[ -n "${args[$cur_arg]}" ]] ; do
      habitica_text+=" ${args[${cur_arg}]}"
      cur_arg=$(( "${cur_arg}" + 1 ))
    done
    ;;
  esac
  cur_arg=$(( "${cur_arg}" + 1 ))
done




print_task_id() {
  echo "$1" | jq --raw-output '.data.id'
}


post_todo() {
  debug "post_todo"
  # <https://habitica.com/apidoc/#api-Task-CreateUserTasks>
  local habitica_type="todo"

  post_data="{"
  post_data+="\"text\":\"${habitica_text}\", "
  post_data+="\"priority\":\"${habitica_priority:-"1.0"}\", " # 1.0 is the default for habitica
  if [[ -n "${habitica_date}" ]]; then
    post_data+="\"date\":\"${habitica_date}\", "
  fi
  post_data+="\"type\":\"${habitica_type}\" "
  post_data+="}"

  http_response=$(post_curl "tasks/user" "${post_data}")
  print_task_id "$http_response"
}

add_tasks_to_todo_checklist() {
  debug "add_tasks_to_todo_checklist"
  # <https://habitica.com/apidoc/#api-Task-AddChecklistItem>
  task_id="$1"

  # every line in the file is interpreted to be a seperated checklist item
  while read -r task ; do
    post_data="{\"text\":"
    post_data+="\"${task}\""
    post_data+="}"

    post_curl "tasks/${task_id}/checklist" "${post_data}" >> /dev/null
  done < "${checklist_file}"
}

main() {
  task_id=$(post_todo)

  if [[ -n "${checklist_file}" ]] ; then
    if [[ ! -f "${checklist_file}" ]] ; then
      echo "cannot find ${checklist_file}: try an absolute paths instead"
      exit 1
    fi

    add_tasks_to_todo_checklist "$task_id"
  fi
}
main
