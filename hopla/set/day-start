#!/usr/bin/env python3


import sys
import os

sys.path.append(os.environ.get("script_dirname"))

import json
import requests
from argparse import ArgumentParser, Namespace

from hoplalib.Authorization import AuthorizationConstants, AuthorizationParser


class RequestHeaders:
    CONTENT_TYPE = "Content-Type"
    CONTENT_TYPE_JSON = "application/json"
    X_CLIENT = "x-client"
    X_API_USER = "x-api-user"
    X_API_KEY = "x-api-key"
    X_CLIENT_VALUE = "79551d98-31e9-42b4-b7fa-9d89b0944319-hopla"

    def __init__(self, auth_parser: AuthorizationParser = None):
        if auth_parser:
            self.hopla_auth_parser = auth_parser
        else:
            self.hopla_auth_parser = AuthorizationParser()

    def get_default_request_headers(self):
        return {
            RequestHeaders.CONTENT_TYPE: RequestHeaders.CONTENT_TYPE_JSON,
            RequestHeaders.X_CLIENT: RequestHeaders.X_CLIENT_VALUE,
            RequestHeaders.X_API_USER: self.hopla_auth_parser.user_id,
            RequestHeaders.X_API_KEY: self.hopla_auth_parser.api_token
        }


class DayStartArgumentParser:
    DAY_START_USER_ARGUMENT = "day_start"

    def __init__(self, arg_parser: ArgumentParser = None):
        if arg_parser:
            self.arg_parser = arg_parser
        else:
            self.arg_parser = ArgumentParser()

        self.arg_parser.add_argument(
            DayStartArgumentParser.DAY_START_USER_ARGUMENT,
            nargs="?",
            help="the hour to start your habitica day",
            type=int,
            default=0,
            choices=range(0, 24)
        )

    @property
    def day_start(self):
        # parsing every time is cheap; it is just 1 value the user supplies
        args: Namespace = self.arg_parser.parse_args()
        return args.day_start


day_start_arg_parser = DayStartArgumentParser()


class DayStartJsonCreator:
    DAY_START_KEY = "dayStart"

    def __init__(self, *, day_start: int):
        self.day_start = day_start

    def _create_post_content(self) -> dict:
        return {DayStartJsonCreator.DAY_START_KEY: self.day_start}

    @property
    def json_content(self) -> str:
        post_content: dict = self._create_post_content()
        # todo: instead of asserts use unittests
        assert len(post_content) != 0, "created json is empty"

        return json.dumps(post_content)


class UrlBuilder:
    def __init__(self, *,
                 domain: str = "https://habitica.com",
                 api_version: str = "v3",
                 path: str = ""):
        self.domain = domain
        self.api_version = api_version
        self.path = path

    def _get_base_url(self) -> str:
        return f"{self.domain}/api/{self.api_version}"

    @property
    def url(self) -> str:
        return f"{self._get_base_url()}{self.path}"


class DayStartPostRequester:
    PATH = "/user/custom-day-start"

    def __init__(self, *,
                 json_body: str,
                 request_headers: dict):
        self.json_body = json_body
        self.request_headers = request_headers

    @property
    def custom_day_start_url(self):
        return UrlBuilder(path=DayStartPostRequester.PATH).url

    def post_day_start(self) -> requests.Response:
        return requests.post(
            url=self.custom_day_start_url,
            headers=self.request_headers,
            data=self.json_body
        )


if __name__ == "__main__":
    headers = RequestHeaders().get_default_request_headers()
    json_content = DayStartJsonCreator(day_start=day_start_arg_parser.day_start).json_content
    day_start_request = DayStartPostRequester(request_headers=headers,
                                              json_body=json_content)
    response = day_start_request.post_day_start()

    # TODO: (contact:melvio) provide debug logging in python scripts
    # TODO: (contact:melvio) provide nice use interaction for python scripts
    print(response.json())
