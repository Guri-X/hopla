#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

print_script_dir() {
  local this_script=$(perl -e 'use Cwd "abs_path"; print abs_path(shift)' "$0")
  local this_script_dir=$(dirname "${this_script}")
  echo "${this_script_dir}"
}
script_dirname=$(print_script_dir)

print_library_dir() {
  local script_dirname="$(print_script_dir)"
  local library_dirname="$(realpath "${script_dirname}/../library/")"
  echo "${library_dirname}"
}

declare -xr library_dir=$(print_library_dir)
source "${library_dir}/api_proxy.sh"
source "${library_dir}/logging.sh"
source "${library_dir}/load_config.sh"
source "${library_dir}/load_auth.sh"


declare -i global_option_help=0
declare -a args_without_globals=()
# <https://stackoverflow.com/questions/12022592/how-can-i-use-long-options-with-the-bash-getopts-builtin>
parse_global_options() {
  debug "parse_global_options"
  for argument in "$@"; do
    case "${argument}" in
      # just set a variable, don't change other options
      "--help"|"-h")     global_option_help=1 ;;
      # don't change other options and parameters
      *)                 args_without_globals+=("${argument}")   ;;
    esac
  done
}
parse_global_options "$@"

show_help() {
  declare -r file="$1"
  cat "${file}.help"
  exit 0
}


declare command_file="${script_dirname}"
declare -a subcmd_arguments=()
assign_subcmd_and_arguments() {
  debug "print_sub_command"
  for argument in "${args_without_globals[@]}" ; do
    if [[ -e "${command_file}/${argument}" ]] ; then
      command_file+="/${argument}"
    else
      subcmd_arguments+=("${argument}")
    fi
  done

  if [[ -d "${command_file}" ]] ; then
    # User didn't finish with full command, they probably want help:
    show_help "${command_file}"
  fi

  if [[ ! -f "${command_file}" ]] ; then
    # User didn't finish with full command, they probably want help:
    echo "${}"
    show_help "${command_file}"
  fi

  # TODO: add error handling for command_file not existing or being a directory
}
assign_subcmd_and_arguments




handle_global_options() {
  if (( global_option_help )) ; then
    show_help "${command_file}"
  fi
}
handle_global_options



main () {
  debug "File to be executed: '${command_file}'"
  debug "Arguments to be passed: '${subcmd_arguments[*]}'"
  debug "# of Arguments to be passed: '${#subcmd_arguments[@]}'"
  "${command_file}" "${subcmd_arguments[@]}"
}
main


