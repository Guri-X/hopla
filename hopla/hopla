#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

print_script_dir() {
  local this_script=$(perl -e 'use Cwd "abs_path"; print abs_path(shift)' "$0")
  local this_script_dir=$(dirname "${this_script}")
  echo "${this_script_dir}"
}
script_dirname=$(print_script_dir)

print_library_dir() {
  local script_dirname="$(print_script_dir)"
  local library_dirname="$(realpath "${script_dirname}/../library/")"
  echo "${library_dirname}"
}

declare -xr library_dir=$(print_library_dir)
source "${library_dir}/api_proxy.sh"
source "${library_dir}/logging.sh"
source "${library_dir}/load_config.sh"
source "${library_dir}/load_auth.sh"




handle_global_options() {
  if [[ "${1:-"--help"}" == "--help" ]]; then
    cat "${script_dirname}/hopla.help"
    exit 0
  fi
}
handle_global_options "$@"

# TODO: add error handling for command_file not existing or being a directory
# TODO: better parsing than this, try to preserve the "$@" structure
command_file="${script_dirname}"
command_counter=1
while [[ -d "${command_file}" && "${command_counter}" -le $# ]]; do
  command_file="${command_file}/${!command_counter}"
  command_counter=$((command_counter + 1))
done

arguments="${*:$command_counter}"

main () {
  debug "File to be executed: '${command_file}'"
  debug "String to be passed: '${arguments}'"
  "${command_file}" "${arguments}"
}
main


